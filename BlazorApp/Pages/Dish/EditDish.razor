@page "/edit-dish/{Id}"
@inject HttpClient Http
@using BlazorApp.Models
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components
@inject NavigationManager NavigationManager
@using System.Text.Json;
@code {
    [Parameter]
    public string Id { get; set; }

    private Guid dishId;
    private DishDto dish = new DishDto();
    private IBrowserFile imageFile;
    private string errorMessage;
    private bool isSubmitting = false;
    string Role { get; set; }
    bool IsAdminOrModerator { get; set; } = false;
    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Perform GET request to get user role
            var response = await Http.GetAsync("api/Users/role");

            // Check for successful response
            response.EnsureSuccessStatusCode();

            // Read the response content as a string
            string responseContent = await response.Content.ReadAsStringAsync();

            // Deserialize JSON response to extract the role
            var jsonResponse = JsonSerializer.Deserialize<RoleResponse>(responseContent,
             new JsonSerializerOptions { PropertyNameCaseInsensitive = true });

            // Assuming jsonResponse.Role contains the actual role string
            Role = jsonResponse.Role;

            IsAdminOrModerator = Role == "Admin" || Role == "Moderator";
            if (!IsAdminOrModerator)
            {
                NavigationManager.NavigateTo("/Error404");
                return; // Выходим из метода, чтобы не продолжать выполнение
            }

            // Проверяем, является ли предоставленный ID валидным GUID
            if (Guid.TryParse(Id, out dishId))
            {
                // Загружаем информацию о блюде
                await LoadDish();
            }
            else
            {
                errorMessage = "Invalid dish ID.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Exception: {ex.Message}";
            // Дополнительно можно показать сообщение об ошибке пользователю
        }
    }

    public class RoleResponse
    {
        public string Role { get; set; }
    }

    private async Task LoadDish()
    {
        try
        {
            var response = await Http.GetAsync($"/api/Dishes/{Id}");
            if (response.IsSuccessStatusCode)
            {
                dish = await response.Content.ReadFromJsonAsync<DishDto>();
            }
            else
            {
                errorMessage = "Failed to load dish details.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error: {ex.Message}";
        }
    }

    private async Task SubmitDish()
    {
        if (!ValidateDish())
        {
            errorMessage = "Please fill out all required fields.";
            return;
        }

        isSubmitting = true;

        try
        {
            MultipartFormDataContent content = new MultipartFormDataContent();
            content.Add(new StringContent(dish.Name), "Name");
            content.Add(new StringContent(dish.Description), "Description");
            content.Add(new StringContent(dish.Price.ToString()), "Price");
            content.Add(new StringContent(dish.Category), "Category");
            content.Add(new StringContent(dish.Id), "Id");
            if (imageFile != null)
            {
                StreamContent imageContent = new StreamContent(imageFile.OpenReadStream());
                content.Add(imageContent, "imageFile", imageFile.Name);
            }

            var response = await Http.PostAsync($"/api/Dishes/EditDish", content);

            if (response.IsSuccessStatusCode)
            {
                // Handle successful submission (e.g., redirect or display success message)
                NavigationManager.NavigateTo("/Dishes");
            }
            else
            {
                errorMessage = "Failed to update dish.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error: {ex.Message}";
        }

        isSubmitting = false;
    }

    private bool ValidateDish()
    {
        return !string.IsNullOrEmpty(dish.Name) && !string.IsNullOrEmpty(dish.Description)
               && dish.Price > 0 && !string.IsNullOrEmpty(dish.Category);
    }

    private async Task OnFileSelected(InputFileChangeEventArgs e)
    {
        imageFile = e.File;
    }
}

<div class="form-container">
    <h2>Edit Dish</h2>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="text-danger">@errorMessage</div>
    }

    <EditForm Model="dish" OnValidSubmit="SubmitDish">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label for="Name">Dish Name</label>
            <InputText id="Name" @bind-Value="dish.Name" class="form-control" required />
        </div>

        <div class="form-group">
            <label for="Description">Description</label>
            <InputTextArea id="Description" @bind-Value="dish.Description" class="form-control" required />
        </div>

        <div class="form-group">
            <label for="Price">Price</label>
            <InputNumber id="Price" @bind-Value="dish.Price" class="form-control" required />
        </div>

        <div class="form-group">
            <label for="Category">Category</label>
            <InputText id="Category" @bind-Value="dish.Category" class="form-control" required />
        </div>

        <div class="form-group">
            <label for="Image">Image</label>
            <InputFile OnChange="OnFileSelected" class="form-control" />
        </div>

        <button type="submit" class="btn btn-primary" disabled="@isSubmitting">Update Dish</button>
    </EditForm>
</div>

<style>
    .form-container {
        max-width: 600px;
        margin: 0 auto;
        padding: 20px;
        background-color: #fff;
        border-radius: 8px;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    }

    .form-group {
        margin-bottom: 15px;
    }

    .form-group label {
        font-weight: bold;
    }

    .form-group input, .form-group textarea {
        width: 100%;
        padding: 10px;
        margin-bottom: 15px;
        border: 1px solid #ccc;
        border-radius: 4px;
    }

    button {
        padding: 10px 20px;
        background-color: #28a745;
        color: #fff;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        transition: background-color 0.3s;
    }

    button:hover {
        background-color: #218838;
    }

    .text-danger {
        color: #dc3545;
        font-weight: bold;
    }
</style>
