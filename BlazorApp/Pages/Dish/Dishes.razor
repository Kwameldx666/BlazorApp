@page "/dishes"
@inject HttpClient Http
@inject IJSRuntime JS
@using BlazorApp.Models
@inject NavigationManager NavigationManager
@using System.Text.Json;
@code {
    private IEnumerable<Dish> dishes;
    private string errorMessage;
    private bool isLoading = true;
    string Role { get; set; }
    bool IsAdminOrModerator { get; set; } = false;


    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Perform GET request to get user role
            var response = await Http.GetAsync("api/Users/role");

            // Check for successful response
            response.EnsureSuccessStatusCode();

            // Read the response content as a string
            string responseContent = await response.Content.ReadAsStringAsync();

            // Deserialize JSON response to extract the role
            var jsonResponse = JsonSerializer.Deserialize<RoleResponse>(responseContent,
             new JsonSerializerOptions { PropertyNameCaseInsensitive = true });

            // Assuming jsonResponse.Role contains the actual role string
            Role = jsonResponse.Role;

            IsAdminOrModerator = Role == "Admin" || Role == "Moderator";
            if (!IsAdminOrModerator)
            {
                NavigationManager.NavigateTo("/Error404");
            }
            else
                await LoadDishes();

        }
        catch (Exception ex)
        {
            errorMessage = $"Exception: {ex.Message}";
            // Optionally show the error message to the user
        }



        await LoadDishes();
    }
    public class RoleResponse
    {
        public string Role { get; set; }
    }

    private async Task LoadDishes()
    {
        try
        {
            // Задержка 3 секунды
            await Task.Delay(3000);

            var response = await Http.GetAsync("/api/Dishes");
            if (response.IsSuccessStatusCode)
            {
                dishes = await response.Content.ReadFromJsonAsync<IEnumerable<Dish>>();
                if (dishes == null || !dishes.Any())
                {
                    errorMessage = "No dishes available.";
                }
            }
            else
            {
                errorMessage = "Failed to load dishes.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task DeleteDish(Guid id)
    {
        if (await JS.InvokeAsync<bool>("confirm", "Are you sure you want to delete this dish?"))
        {
            try
            {
                var response = await Http.DeleteAsync($"api/dishes/{id}");

                if (response.IsSuccessStatusCode)
                {
                    await LoadDishes(); // Обновляем список после удаления
                    await JS.InvokeVoidAsync("alert", "Dish deleted successfully!");
                }
                else
                {
                    await JS.InvokeVoidAsync("alert", "Failed to delete the dish. Please try again.");
                }
            }
            catch (Exception ex)
            {
                await JS.InvokeVoidAsync("alert", $"An error occurred. Please try again. {ex.Message}");
            }
        }
    }
}

<div class="admin-container">
    <div class="admin-header">
        <h2>Dishes List</h2>
        <a href="/add-dish" class="add-dish-btn">Add New Dish</a>
    </div>

    @if (isLoading)
    {
        <div class="loading-message">
            <p>Loading dishes, please wait...</p>
        </div>
    }
    else
    {
        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="text-danger">@errorMessage</div>
        }

        @if (dishes == null || !dishes.Any())
        {
            <div class="empty-message">
                <p>No dishes available. Please add some dishes.</p>
            </div>
        }
        else
        {
            <table class="table">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Description</th>
                        <th>Price</th>
                        <th>Category</th>
                        <th>Image</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var dish in dishes)
                    {
                        <tr id="dish-row-@dish.Id">
                            <td>@dish.Name</td>
                            <td>@dish.Description</td>
                            <td>@dish.Price.ToString("C", new System.Globalization.CultureInfo("en-US"))</td>
                            <td>@dish.Category</td>
                            <td>
                                <img src="@dish.ImageUrl" alt="@dish.Name" style="width: 60px; height: 60px; border-radius: 8px;" />
                            </td>
                            <td>
                                <div class="table-actions">
                                    <a href="/edit-dish/@dish.Id" class="edit-btn">Edit</a>
                                    <button class="delete-btn" @onclick="() => DeleteDish(dish.Id)">Delete</button>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    }
</div>

<style>
    .admin-container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 20px;
        background-color: #f7f7f7;
        border-radius: 10px;
        box-shadow: 0 0 20px rgba(0, 0, 0, 0.1);
    }

    .admin-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
    }

        .admin-header h2 {
            font-size: 24px;
            color: #333;
        }

    .add-dish-btn {
        background-color: #28a745;
        color: white;
        padding: 10px 20px;
        border-radius: 5px;
        text-decoration: none;
        font-weight: bold;
        transition: background-color 0.3s ease;
    }

        .add-dish-btn:hover {
            background-color: #218838;
        }

    .table {
        width: 100%;
        border-collapse: collapse;
        margin-bottom: 20px;
    }

        .table th, .table td {
            padding: 12px 15px;
            border: 1px solid #ddd;
            text-align: left;
        }

        .table th {
            background-color: #007bff;
            color: white;
        }

        .table tbody tr:hover {
            background-color: #f1f1f1;
        }

    .table-actions {
        display: flex;
        gap: 10px;
    }

    .edit-btn {
        background-color: #ffc107;
        color: white;
        padding: 8px 12px;
        border-radius: 5px;
        text-decoration: none;
        transition: background-color 0.3s ease;
    }

        .edit-btn:hover {
            background-color: #e0a800;
        }

    .delete-btn {
        background-color: #dc3545;
        color: white;
        padding: 8px 12px;
        border-radius: 5px;
        text-decoration: none;
        transition: background-color 0.3s ease;
    }

        .delete-btn:hover {
            background-color: #c82333;
        }

    .loading-message, .empty-message {
        text-align: center;
        font-size: 18px;
        color: #999;
        margin-top: 20px;
    }

    .text-danger {
        color: #dc3545;
        font-weight: bold;
    }
</style>
